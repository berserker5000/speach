SEARCH.PY

# import os
# from linux_commands import generate_sw_list,run_bash_command
# import pyttsx
# import time
# import webbrowser

# def get_os_type():
#     return platform.system()

# def current_time():
#     return time.strftime("%A %d of %b %Y year %H hours %M minutes")
#
#
# def speaking(text):
#     engine = pyttsx.init()
#     voices = engine.getProperty('voices')
#     engine.setProperty('voice', voices[1].id)
#     engine.setProperty('voice', 'english')
#     engine.setProperty('rate', 190)
#     engine.say(text)
#     return engine.runAndWait()
#
#
# def comparator(lst, text):  # lst = set, text = string
#     t1 = text.split(" ")  # t1 = list
#     for word in t1:
#         if word in lst:
#             return word
#     return ""
#
#
# def google_search(text):
#     split_text = text.split(" ")
#     google = "http://google.com#q="
#     search_string = google + "+".join(split_text)
#     return webbrowser.open_new(search_string)
#
#
# def what_to_do(recognize):
#     speaking("Sorry, I don't know how to proceed with " + recognize)
#     speaking("Let's search your question with google!")
#     return google_search(recognize)


# def mute_system(_os):
#     if _os == "Linux":
#         return os.popen2("amixer -D pulse sset Master 0%")
#     elif _os == "Windows":
#         return os.popen2("nircmd.exe mutesysvolume 1")
#
#
# def unmute_system(_os):
#     if _os == "Linux":
#         return os.popen2("amixer -D pulse sset Master 100%")
#     elif _os == "Windows":
#         return os.popen2("nircmd.exe mutesysvolume 0")

# def run_calculator(_os):
#     if _os == "Linux":
#         return os.popen2("gnome-calculator")
#     elif _os == "Windows":
#         return os.popen2("calc")

# def adjust_volume(_os, number):
#     if type(number) == list:
#         number = "".join(number)
#     if _os == "Linux":
#         return os.popen2("amixer -D pulse sset Master " + str(number) + "%")
#     elif _os == "Windows":
#         num = (int(number) * 65535) / 100
#         return os.popen2("nircmd.exe setsysvolume " + str(num))


# def question(audio, action):
#     yes = ['yep', 'yes', 'ea', ' yeah']
#     no = ['no', 'nope']
#     speaking("Are you sure you want to " + str(audio))
#     for i in yes:
#         if i in audio:
#             return speaking("As you wish. I will do " + str(audio)), action
#     for i in no:
#         if i in audio:
#             return speaking("Ok, I wouldn't do " + str(audio))




LINUX_COMMANDS.PY

# def linux_soft_list():
#     return subprocess.check_call(["apt", "list", "--installed"], stdout=open('/tmp/software_list_tmp.txt', 'wb'),
#                                  stderr=subprocess.STDOUT)



WINDOWS_COMMANDS.PY
# from collections import namedtuple
# from ctypes import byref, create_unicode_buffer, windll
# from ctypes.wintypes import DWORD
# from itertools import count
#
# UID_BUFFER_SIZE = 39
# PROPERTY_BUFFER_SIZE = 256
# ERROR_MORE_DATA = 234
# ERROR_INVALID_PARAMETER = 87
# ERROR_SUCCESS = 0
# ERROR_NO_MORE_ITEMS = 259
# ERROR_UNKNOWN_PRODUCT = 1605
#
# PRODUCT_PROPERTIES = [u'Language',
#                       u'ProductName',
#                       u'PackageCode',
#                       u'Transforms',
#                       u'AssignmentType',
#                       u'PackageName',
#                       u'InstalledProductName',
#                       u'VersionString',
#                       u'RegCompany',
#                       u'RegOwner',
#                       u'ProductID',
#                       u'ProductIcon',
#                       u'InstallLocation',
#                       u'InstallSource',
#                       u'InstallDate',
#                       u'Publisher',
#                       u'LocalPackage',
#                       u'HelpLink',
#                       u'HelpTelephone',
#                       u'URLInfoAbout',
#                       u'URLUpdateInfo', ]
#
# Product = namedtuple('Product', PRODUCT_PROPERTIES)
#
#
# def get_property_for_product(product, property, buf_size=PROPERTY_BUFFER_SIZE):
#     property_buffer = create_unicode_buffer(buf_size)
#     size = DWORD(buf_size)
#     result = windll.msi.MsiGetProductInfoW(product, property, property_buffer, byref(size))
#     if result == ERROR_MORE_DATA:
#         return get_property_for_product(product, property, 2 * buf_size)
#     elif result == ERROR_SUCCESS:
#         return property_buffer.value
#     else:
#         return None
#
#
# def populate_product(uid):
#     properties = []
#     for property in PRODUCT_PROPERTIES:
#         properties.append(get_property_for_product(uid, property))
#     return Product(*properties)
#
#
# def get_installed_products_uids():
#     products = []
#     for i in count(0):
#         uid_buffer = create_unicode_buffer(UID_BUFFER_SIZE)
#         result = windll.msi.MsiEnumProductsW(i, uid_buffer)
#         if result == ERROR_NO_MORE_ITEMS:
#             break
#         products.append(uid_buffer.value)
#     return products
#
#
# def get_installed_products():
#     products = []
#     for puid in get_installed_products_uids():
#         products.append(populate_product(puid))
#     return products
#
#
# def is_product_installed_uid(uid):
#     buf_size = 256
#     uid_buffer = create_unicode_buffer(uid)
#     property = u'VersionString'
#     property_buffer = create_unicode_buffer(buf_size)
#     size = DWORD(buf_size)
#     result = windll.msi.MsiGetProductInfoW(uid_buffer, property, property_buffer, byref(size))
#     if result == ERROR_UNKNOWN_PRODUCT:
#         return False
#     else:
#         return True
# def generate_sw_list():
#     apps = get_installed_products()
#     application_list = set()
#     for app in apps:
#         application_list.add(app.ProductName.lower())
#     return application_list